##########################################
VM and latest R and initial packages
##########################################

- Criar instancia Debian na Google Cloud
- Adicionar regra firewall porta TCP 3838
- sudo apt update
- sudo apt upgrade
- Instalar pacotes Debian (sudo apt-get install libcurl4-openssl-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev libxml2-dev libsodium-dev gdebi-core libv8-dev cmake wget git)

-Instalar o R 
    - sudo apt install dirmngr gnupg apt-transport-https ca-certificates software-properties-common
    - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key '95C0FAF38DB3CCAD0C080A7BDC78B2DDEABC47B7'
    - sudo add-apt-repository 'deb http://cloud.r-project.org/bin/linux/debian bullseye-cran40/'
    - sudo apt-get upgrade
    - sudo apt install r-base r-base-dev
    - sudo apt update
    - sudo apt upgrade
   
     - OBS: Se precisar remover o R anterior (se estiver instalado!): 
      - sudo apt-get purge r-base* r-recommended r-cran-*
      - sudo apt autoremove
      
 ===============================================================
 OBS: Caso não tenha muita memoria, aumente o swap:
 ===============================================================
 
 cd /
sudo dd if=/dev/zero of=swapfile bs=1M count=3000
sudo mkswap swapfile
sudo swapon swapfile
sudo vi etc/fstab e adicione a linha:
/swapfile none swap sw 0 0

cat /proc/meminfo
 
=================================================================
Instalacao das libs do Apache Arrow
=================================================================

sudo apt update
sudo apt install -y -V ca-certificates lsb-release wget
wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
sudo apt update

sudo apt install -y -V libarrow-dev # For C++
sudo apt install -y -V libarrow-glib-dev # For GLib (C)
sudo apt install -y -V libarrow-dataset-dev # For Apache Arrow Dataset C++
sudo apt install -y -V libarrow-dataset-glib-dev # For Apache Arrow Dataset GLib (C)
sudo apt install -y -V libarrow-flight-dev # For Apache Arrow Flight C++
sudo apt install -y -V libarrow-flight-glib-dev
sudo apt install -y -V libplasma-dev # For Plasma C++
sudo apt install -y -V libplasma-glib-dev # For Plasma GLib (C)
sudo apt install -y -V libparquet-dev # For Apache Parquet C++
sudo apt install -y -V libparquet-glib-dev # For Apache Parquet GLib (C)

Entre no R com o SUDO (sudo R) e digite:

Sys.setenv("NOT_CRAN" = "true", "ARROW_R_DEV" = TRUE)
install.packages("arrow", quit=FALSE, verbose=TRUE)

Confirme com o arrow::arrow_info() se a opcção DATASET está ativada, senão, use o arrow::install_arrow()

==================================================================
RENV
==================================================================
- sudo mkdir /opt/RENV_ROOT_CACHE
- sudo chmod -R 666 /opt/RENV_ROOT_CACHE
- Instalar pacotes R (renv) ( sudo Rscript -e "install.packages(\"renv\")" )
- Crie um diretorio de teste (i.e mkdir ~/teste), e de dentro deste diretorio entre no R e defina a variável de ambiente para um local a ser compartilhado 
(Sys.setenv("RENV_PATHS_ROOT" = "/opt/RENV_ROOT")
(Sys.setenv("RENV_PATHS_CACHE" = "/opt/RENV_ROOT_CACHE")

- Ainda dentro do R digite renv::init() e reinicie o R

==================================================================
Instalar o Shiny Server
==================================================================
- Baixar Shiny-Server (wget https://download3.rstudio.org/ubuntu-18.04/x86_64/shiny-server-1.5.20.1002-amd64.deb)
- Instalar Shiny-Server (sudo gdebi shiny-server-1.5.20.1002-amd64.deb)
- sudo chmod 777 -R /srv/shiny-server/
- Adicionar para iniciar automaticamente (sudo systemctl enable shiny-server)



##########################################
Setup extra Disk (if needed)
##########################################

- Criar um novo disco no painel de controle do GCP e montar no Linux:
sudo lsblk
sudo mkfs.ext4 -m 0 -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/sdb
sudo mkdir -p /mnt/disks/disk1
sudo mount -o discard,defaults /dev/sdb /mnt/disks/disk1
sudo chmod a+w /mnt/disks/disk1

More info: https://cloud.google.com/compute/docs/instances/transfer-files#transferbrowser

OBS: Lembrar de dar as permissoes para criacao de arquivos pro usuario shiny criar SQLite DB, etc

(Mais info: 
 - https://github.com/paeselhz/RStudio-Shiny-Server-on-GCP
 - https://posit.co/download/shiny-server/
 - https://docs.posit.co/shiny-server/
 - https://linux.how2shout.com/install-the-latest-r-programming-language-version-on-debian-11-bullseye/
 - https://unix.stackexchange.com/questions/598520/client-loop-send-disconnect-broken-pipe-for-chroot-sftp-user-with-correct-p
 
##########################################
 SFTP Server (if needed)
##########################################
 
 sudo groupadd sftpusers

sudo mkdir /var/sftp
sudo mkdir /var/sftp/myuser01
sudo chown -R root:root /var/sftp
chmod -R 755 /var/sftp

sudo adduser -h /var/sftp/myuser01 myuser01
sudo usermod -a -G sftpusers myuser01

In your example, /var/sftp and /var/sftp/usero1 needs to be owned by root and not writable by any other user

your issue is likely that you did this:

chown myuser01:myuser01 /var/sftp/myuser01
instead it should be owned by root:root and chmod 755

sudo mkdir /var/sftp
sudo mkdir /var/sftp/myuser01
sudo chown -R root:root /var/sftp
chmod -R 755 /var/sftp
Now that the user directory is owned by root:root and not writable by others, your user should be able to be logged into it and chrooted via the sshd internal-sftp

ForceCommand internal-sftp
ChrootDirectory /var/sftp/
So, to put it all together:

sudo groupadd sftpusers

sudo ln -s /var/sftp /mnt/disks/disk1/SFTP

sudo mkdir /var/sftp/myuser01
sudo chown -R root:root /var/sftp
sudo chmod -R 755 /var/sftp

sudo adduser -h /var/sftp/myuser01 myuser01
sudo usermod -a -G sftpusers myuser01


edit your /etc/ssh/sshd_config and add this to the end:

Match Group sftpusers
      ForceCommand internal-sftp
      ChrootDirectory /var/sftp/%u
      PermitTunnel no
      AllowAgentForwarding no
      AllowTcpForwarding no
      X11Forwarding no


Subsystem    sftp    internal-sftp

PasswordAuthentication yes
ChallengeResponseAuthentication no


sudo systemctl restart sshd

##########################################
Install NGINX Web Server
##########################################
 Setup VM External IP and DNS Record before this!
 
sudo apt-get install nginx
sudo apt-get install apache2-utils
sudo service nginx stop

sudo vi /etc/nginx/nginx.conf

Under http { .... } session, add:


map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }
    
 server {
    listen 80;


    location /rstudio/ {
      rewrite ^/rstudio/(.*)$ /$1 break;
      proxy_pass http://localhost:8787;
      proxy_redirect http://localhost:8787/ $scheme://$host/rstudio/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 20d;
      auth_basic "Username and Password are required"; 
      auth_basic_user_file /etc/nginx/.htpasswd;
    }



    location /shiny/ {
      rewrite ^/shiny/(.*)$ /$1 break;
      proxy_pass http://127.0.0.1:3838;
      proxy_redirect http://localhost:3838/ $scheme://$host/shiny/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 20d;
      proxy_buffering off;
      auth_basic "Username and Password are required"; 
      auth_basic_user_file /etc/nginx/.htpasswd;
    }
    
    location /shiny-admin/ {
      rewrite ^/shiny-admin/(.*)$ /$1 break;
      proxy_pass http://localhost:4151;
      proxy_redirect http://localhost:4151/ $scheme://$host/shiny-admin/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 20d;
      proxy_buffering off;
      auth_basic "Username and Password are required"; 
      auth_basic_user_file /etc/nginx/.htpasswd;
    }    
  } 
 
Comentar todas as linhas do arquivo:
sudo vi /etc/nginx/sites-available/default
 
 cd /etc/nginx
sudo htpasswd -c /etc/nginx/.htpasswd exampleuser
sudo systemctl start ngiyx 
sudo systemctl enable ngiyx (Para iniciar automaticamente 

sudo systemctl stop shiny-server

sudo vi /etc/shiny-server/shiny-server.conf

server{
    listen 3838 127.0.0.1;
    
    location / {
    site_dir /srv/shiny-server;
    log_dir /var/log/shiny-server;
    directory_index on;
    }
}

sudo systemctl start shiny-server

sudo passwd shiny (coloque uma senha prousuario shiny)
su - shiny
crie um diretorio de teste (ie. /srv/shiny-server/teste_shiny)
entre no R e dê um renv:init() e reinicie a sessao do R
Instale o pacote shiny e crie um app de teste 
 
 *** FROM: https://www.simoncoulombe.com/2018/05/protected_free_shiny/
 

##########################################
 Creating a new app/package (On Dev machine)
##########################################
 
- Create repo in github
- Copy repo SSH URL
- Create a RStudio project using version control and paste URL
- Test git commit/pull
- Activate renv (Tools/Project Options/Environment)
- Install packages (usethis, pkgload, devtools, shiny, tidyverse, arrow, etc)
- Create R folder (From Mastering Shiny book - Packages chapter)
- Create app.R with a function wrapping all code (i.e myApp) to be called by the package
- Restart RStudio session 
- Use CTLR+SHIFT+L to load all pkgs
- Create description file usethis::use_description()
- Create and app.R in the root folder to call the main function with: pkgload::load_all(".") myApp()
- Add the app.R in the buildignore (usethis::use_build_ignore("app.R"))
- Add shiny, pkgload to add dependencias in your DESCRIPTION file using usethis::use_package("shiny")
- USe #' @import shiny in the R/app.R instead of library ("pkgs")
- Create data (usethis::use_data(stones) and inst/extdata for internal data and external datasets (usethis::use_data(stones) or read.csv(system.file("exdata", "mydata.csv", package = "myApp")))
- Change app.R to use the pkg (myApp::myApp())
- Add #' @export myApp to the wrapping function and Run devtools::document() 
- Add app.R in the .Rbuildignore (usethis::use_build_ignore("app.R"))

##########################################
Instalando o app
##########################################

- Copiar os arquivos pro usuario shiny (sudo passwd shiny ... sudo su - shiny)
# approach two
mkdir -p ~/renv
cp .renv.lock pro home do susuario shiny
instalar o renv pro R do susuario shiny
Sys.setenv("ARROW_R_DEV"=TRUE)
renv::restore (sem activate!!!!)

##########################################
PostgreSQL
##########################################
- Seguir delathes aqui:
https://cloud.google.com/community/tutorials/setting-up-postgres
- Ative o CREATE EXTENSION "uuid-ossp"; se for usar uuid


